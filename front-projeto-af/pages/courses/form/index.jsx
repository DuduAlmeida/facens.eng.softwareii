import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";

import * as yup from "yup";
import { useForm } from "react-hook-form";
import { api } from "../../../services/axios";
import { yupResolver } from "@hookform/resolvers/yup";
import { faArrowLeft } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import styles from "../../../styles/Home.module.css";

const formSchema = yup.object().shape({
  name: yup.string().required("O nome é obrigatório"),
  subscription: yup.string(),
});

export default function UserForm() {
  const router = useRouter();

  const {
    reset,
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    mode: "onChange",
    resolver: yupResolver(formSchema),
  });

  const [isEdit, setIsEdit] = useState(false);
  const [id, setId] = useState("");

  useEffect(() => {
    const idFromQuery = String(router.query.id || "");

    setId(idFromQuery);
  }, [router.query.id]);

  useEffect(() => {
    const hasToFetchEntity = !!id;
    if (hasToFetchEntity) {
      api
        .get(`course/${id}`)
        .then((response) => response.data)
        .then((response) => !response?.error && reset(response?.data || {}))
        .catch(returnToListPage);
    }
    setIsEdit(hasToFetchEntity);
  }, [id]);

  const returnToListPage = () => {
    router.push("/courses");
  };

  const onSubmit = (formData) => {
    const submitType = isEdit ? "put" : "post";
    const endpoint = "course/{id}".replace("{id}", id);

    api[submitType](endpoint, formData)
      .then((response) => {
        console.log("response", response);
        if (!response?.data?.error) returnToListPage();
      })
      .catch((error) => {
        // Lógica para lidar com erros na requisição
        console.error(error);
      });
  };

  useEffect(() => {}, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <span
          onClick={returnToListPage}
          className="text-blue-500 hover:text-blue-700 flex items-center cursor-pointer"
        >
          <FontAwesomeIcon icon={faArrowLeft} className="mr-2" />
          Voltar
        </span>

        <h1 className={styles.title}>{isEdit ? "Editar" : "Criar"} Curso</h1>

        <form
          id="user-form"
          onSubmit={handleSubmit(onSubmit)}
          className="w-full grid grid-rows-2 grid-columns-2 grid-flow-col gap-8 px-12 mt-16"
        >
          <div className="mb-4 ">
            <label htmlFor="name" className="block mb-2">
              Nome do Curso
            </label>
            <input
              type="text"
              id="name"
              placeholder="Ex: Ronaldo"
              {...register("name")}
              className="w-full border border-gray-300 rounded p-2"
            />
            {errors.name && (
              <span className="text-red-500">{errors.name.message}</span>
            )}
          </div>

          <div className="mb-4 ">
            <label htmlFor="name" className="block mb-2">
              Quantidade de provas
            </label>
            <input
              type="number"
              id="countTests"
              placeholder="Ex: 2"
              {...register("countTests")}
              className="w-full border border-gray-300 rounded p-2"
            />
            {errors.countTests && (
              <span className="text-red-500">{errors.countTests.message}</span>
            )}
          </div>

          <div className="mb-4 ">
            <label htmlFor="name" className="block mb-2">
              Professor
            </label>
            <input
              type="text"
              id="teacher"
              placeholder="Ex: Leles"
              {...register("teacher")}
              className="w-full border border-gray-300 rounded p-2"
            />
            {errors.teacher && (
              <span className="text-red-500">{errors.teacher.message}</span>
            )}
          </div>
        </form>

        <button
          type="submit"
          form="user-form"
          className="bg-blue-500 text-white px-4 py-2 rounded mt-16"
        >
          Enviar
        </button>
      </main>

      <footer className={styles.footer}>
        Testemunhas de Turing @{new Date().getFullYear()}
      </footer>
    </div>
  );
}
